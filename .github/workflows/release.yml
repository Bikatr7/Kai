name: Build and Release Binaries

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
      should-release: ${{ steps.check-tag.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get version from package.yaml
        id: get-version
        run: |
          VERSION=$(grep '^version:' package.yaml | cut -d' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
      
      - name: Check if tag already exists
        id: check-tag
        run: |
          TAG="v${{ steps.get-version.outputs.version }}"
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists, skipping release"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist, proceeding with release"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Haskell (Stack)
      # Uses the same action as the Pages workflow
      # Ensures GHC/Stack are available across platforms
      
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.4.8'
          enable-stack: true
          stack-version: 'latest'

      - name: Cache Stack
        uses: actions/cache@v3
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ hashFiles('stack.yaml.lock') }}

      - name: Build CLI binary
        run: |
          stack --no-terminal build :kai
          mkdir -p dist
          # Locate the built binary
          BIN_PATH=$(stack path --local-install-root)/bin/kai || true
          if [ ! -x "$BIN_PATH" ]; then
            # fallback attempt
            BIN_PATH=$(stack path --local-bin)/kai || true
          fi
          if [ ! -x "$BIN_PATH" ]; then
            echo "Binary not found" >&2; exit 1
          fi
          cp "$BIN_PATH" dist/
          # Name artifact according to platform
          if [ "${{ runner.os }}" = "macOS" ]; then
            mv dist/kai dist/kai-macos-amd64
          else
            mv dist/kai dist/kai-linux-amd64
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: kai-${{ runner.os }}
          path: dist/*

  release:
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ needs.check-version.outputs.tag }}
          git push origin ${{ needs.check-version.outputs.tag }}

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.tag }}
          name: "Kai v${{ needs.check-version.outputs.version }}"
          generate_release_notes: true
          files: |
            artifacts/**/kai-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

